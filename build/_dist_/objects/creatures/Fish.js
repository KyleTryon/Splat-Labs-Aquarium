import o from"./Creature.js";import r from"../routines/RoutineManager.js";export default class g extends o{constructor(t){super(t);this.scene=this.scene,this._min_flap_delay=1500,this._lastFlapTime=0,this.target=this.scene.getRandomPoint(),this.create(t.x,t.y),this.routineManager=new r({fish:this}),this.debugText=this.scene.add.text(this.x,this.y,"debug"),this.nameText=this.scene.add.text(this.x,this.y,this.name)}create(t,e){if(t&&e)this.x=t,this.y=e;else{let i=this.scene.getRandomPoint();this.x=i.x,this.y=i.y}}update(t){this._deltaTime=t/100,this.routineManager.run(),this.debugText.text=this.routineManager.activeRoutine.name+" "+this.routineManager.activeRoutine.priority.toString(),this.debugText.setPosition(this.x,this.y-25),this.nameText.setPosition(this.x,this.y-50)}getDistanceToTartget(){return Phaser.Math.Distance.Between(this.x,this.y,this.target.x,this.target.y)}rotateToTarget(){let t=Phaser.Math.Angle.Between(this.x,this.y,this.target.x,this.target.y),e=this.rotation,i=t-e;this.angle<-90||this.angle>90?this.flipY=!0:this.flipY=!1,this.rotation=e+i*this._deltaTime}swimToTarget(t,e){t=t||4,this.flap(this.target,t,e)}flap(t,e,i){if(this.rotateToTarget(),i=i||1,Date.now()>this._lastFlapTime)if(e=this.speed*e,this.energy<e)console.log("Fish is too tired to swim");else{this.energy-=e/20;let s=Phaser.Math.Angle.Between(this.x,this.y,t.x,t.y),h=e*Math.cos(s),a=e*Math.sin(s),n=this._body.velocity.x+(h-this._body.velocity.x),l=this._body.velocity.y+(a-this._body.velocity.y);this._body.setVelocity(n,l),this._lastFlapTime=Date.now()+this.getPrecisionVariableOffset()+this._min_flap_delay/i}}}
